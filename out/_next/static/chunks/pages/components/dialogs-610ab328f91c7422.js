(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4827],{91103:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/dialogs",function(){return t(23002)}])},92223:function(e,n,t){"use strict";t.d(n,{Z:function(){return v}});var o=t(85893),a=t(67294),i=t(87357),l=t(66242),s=t(34386),r=t(67720),c=t(57922),m=t(93946),d=t(78445),u=t(44267),p=t(96420),g=t(98396),h=t(33454),x=t(63730),C=t(15660),f=t.n(C),D=t(86501),b=t(66485),j=t.n(b);let y=e=>e&&("TEXTAREA"===e.nodeName||"INPUT"===e.nodeName);var T=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=(0,a.useRef)(null),t=()=>{e.onSuccess&&e.onSuccess(),e.selectOnCopy&&y(n.current)&&n.current.select()},o=()=>{e.onError&&e.onError();let t=!1!==e.selectOnError;t&&y(n.current)&&n.current.select()},i=e=>{j()(e).then(t).catch(o)},l=(0,a.useCallback)(e=>{"string"==typeof e?i(e):n.current&&i(n.current.value)},[]);return{copy:l,target:n}};let k=e=>{let{id:n,sx:t,code:C,title:b,children:j,className:y}=e,[k,v]=(0,a.useState)(!1),[I,S]=(0,a.useState)(null!==C.tsx?"tsx":"jsx"),B=T(),Z=(0,g.Z)(e=>e.breakpoints.down("md"));(0,a.useEffect)(()=>{f().highlightAll()},[k,I]);let w=()=>null!==C.tsx&&"tsx"===I?C.tsx.props.children.props.children:null!==C.jsx&&"jsx"===I?C.jsx.props.children.props.children:"",O=()=>{B.copy(w()),D.ZP.success("The source code has been copied to your clipboard.",{duration:2e3})};return(0,o.jsxs)(l.Z,{className:y,sx:{"& .MuiCardHeader-action":{lineHeight:.8},...t},id:n||"card-snippet--".concat(b.toLowerCase().replace(/ /g,"-")),children:[(0,o.jsx)(d.Z,{title:b,...Z?{}:{action:(0,o.jsx)(m.Z,{onClick:()=>v(!k),children:(0,o.jsx)(x.Z,{icon:"mdi:code-tags",fontSize:20})})}}),(0,o.jsx)(u.Z,{children:j}),Z?null:(0,o.jsxs)(c.Z,{in:k,children:[(0,o.jsx)(r.Z,{sx:{my:"0 !important"}}),(0,o.jsxs)(u.Z,{sx:{position:"relative","& pre":{m:"0 !important",maxHeight:500}},children:[(0,o.jsx)(i.Z,{sx:{mb:4,display:"flex",alignItems:"center",justifyContent:"flex-end"},children:(0,o.jsxs)(h.Z,{exclusive:!0,size:"small",color:"primary",value:I,onChange:(e,n)=>null!==n?S(n):null,children:[null!==C.tsx?(0,o.jsx)(p.Z,{value:"tsx",children:(0,o.jsx)(x.Z,{icon:"mdi:language-typescript",fontSize:20})}):null,null!==C.jsx?(0,o.jsx)(p.Z,{value:"jsx",children:(0,o.jsx)(x.Z,{icon:"mdi:language-javascript",fontSize:20})}):null]})}),(0,o.jsx)(s.Z,{title:"Copy the source",placement:"top",children:(0,o.jsx)(m.Z,{onClick:O,sx:{top:"5rem",color:"grey.100",right:"2.5625rem",position:"absolute"},children:(0,o.jsx)(x.Z,{icon:"mdi:content-copy",fontSize:20})})}),(0,o.jsx)("div",{children:null!==C[I]?C[I]:null})]})]})]})};var v=k},23002:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return eg}});var o=t(85893),a=t(86886),i=t(15861),l=t(92223),s=t(67294),r=t(11057),c=t(50657),m=t(50135),d=t(37645),u=t(6514),p=t(31425),g=t(58951);let h=()=>{let[e,n]=(0,s.useState)(!1),t=()=>n(!0),a=()=>n(!1);return(0,o.jsxs)(s.Fragment,{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:t,children:"Open form dialog"}),(0,o.jsxs)(c.Z,{open:e,onClose:a,"aria-labelledby":"form-dialog-title",children:[(0,o.jsx)(d.Z,{id:"form-dialog-title",children:"Subscribe"}),(0,o.jsxs)(u.Z,{children:[(0,o.jsx)(g.Z,{sx:{mb:3},children:"To subscribe to this website, please enter your email address here. We will send updates occasionally."}),(0,o.jsx)(m.Z,{id:"name",autoFocus:!0,fullWidth:!0,type:"email",label:"Email Address"})]}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(r.Z,{onClick:a,children:"Disagree"}),(0,o.jsx)(r.Z,{onClick:a,children:"Agree"})]})]})]})},x=()=>{let[e,n]=(0,s.useState)(!1),t=()=>n(!0),a=()=>n(!1);return(0,o.jsxs)(s.Fragment,{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:t,children:"Open dialog"}),(0,o.jsxs)(c.Z,{open:e,onClose:a,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description",children:[(0,o.jsx)(d.Z,{id:"alert-dialog-title",children:"Use Google's location service?"}),(0,o.jsx)(u.Z,{children:(0,o.jsx)(g.Z,{id:"alert-dialog-description",children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(r.Z,{onClick:a,children:"Disagree"}),(0,o.jsx)(r.Z,{onClick:a,children:"Agree"})]})]})]})};var C=t(72852),f=t(18972),D=t(47312),b=t(94054),j=t(90948),y=t(50480),T=t(18360);let k=(0,j.ZP)("form")({margin:"auto",display:"flex",width:"fit-content",flexDirection:"column"}),v=()=>{let[e,n]=(0,s.useState)(!1),[t,a]=(0,s.useState)(!0),[i,l]=(0,s.useState)("sm"),m=()=>n(!0),h=()=>n(!1),x=e=>{l(e.target.value)},j=e=>{a(e.target.checked)};return(0,o.jsxs)(s.Fragment,{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:m,children:"Open dialog"}),(0,o.jsxs)(c.Z,{open:e,maxWidth:i,fullWidth:t,onClose:h,"aria-labelledby":"max-width-dialog-title",children:[(0,o.jsx)(d.Z,{id:"max-width-dialog-title",children:"Optional sizes"}),(0,o.jsxs)(u.Z,{children:[(0,o.jsx)(g.Z,{sx:{mb:4},children:"You can set my maximum width and whether to adapt or not."}),(0,o.jsxs)(k,{noValidate:!0,children:[(0,o.jsxs)(b.Z,{sx:{mt:2,minWidth:120},children:[(0,o.jsx)(D.Z,{htmlFor:"max-width",children:"maxWidth"}),(0,o.jsxs)(T.Z,{label:"maxWidth",value:i,onChange:x,inputProps:{name:"max-width",id:"max-width"},children:[(0,o.jsx)(f.Z,{value:!1,children:"false"}),(0,o.jsx)(f.Z,{value:"xs",children:"xs"}),(0,o.jsx)(f.Z,{value:"sm",children:"sm"}),(0,o.jsx)(f.Z,{value:"md",children:"md"}),(0,o.jsx)(f.Z,{value:"lg",children:"lg"}),(0,o.jsx)(f.Z,{value:"xl",children:"xl"})]})]}),(0,o.jsx)(y.Z,{label:"Full width",sx:{mt:2},control:(0,o.jsx)(C.Z,{checked:t,onChange:j})})]})]}),(0,o.jsx)(p.Z,{className:"dialog-actions-dense",children:(0,o.jsx)(r.Z,{onClick:h,children:"Close"})})]})]})};var I=t(78462),S=t(87952),B=t(19294),Z=t(59334),w=t(98619),O=t(18987),A=t(63730),F=t(60155);let M=["username@gmail.com","user02@gmail.com"],L=()=>{let[e,n]=(0,s.useState)(!1),[t,a]=(0,s.useState)(M[1]),l=()=>n(!0),m=()=>n(!1),u=e=>{n(!1),a(e)};return(0,o.jsxs)("div",{children:[(0,o.jsxs)(i.Z,{variant:"subtitle1",sx:{mb:2},children:["Selected: ",t]}),(0,o.jsx)(r.Z,{variant:"outlined",onClick:l,children:"Open simple dialog"}),(0,o.jsxs)(c.Z,{onClose:m,"aria-labelledby":"simple-dialog-title",open:e,children:[(0,o.jsx)(d.Z,{id:"simple-dialog-title",children:"Set backup account"}),(0,o.jsxs)(I.Z,{sx:{pt:0,px:"0 !important"},children:[M.map(e=>(0,o.jsx)(B.ZP,{disablePadding:!0,onClick:()=>u(e),children:(0,o.jsxs)(w.Z,{children:[(0,o.jsx)(O.Z,{children:(0,o.jsx)(F.Z,{skin:"light",children:(0,o.jsx)(A.Z,{icon:"mdi:account-outline"})})}),(0,o.jsx)(Z.Z,{primary:e})]})},e)),(0,o.jsx)(B.ZP,{disablePadding:!0,onClick:()=>u("addAccount"),children:(0,o.jsxs)(w.Z,{children:[(0,o.jsx)(O.Z,{children:(0,o.jsx)(S.Z,{children:(0,o.jsx)(A.Z,{icon:"mdi:plus"})})}),(0,o.jsx)(Z.Z,{primary:"Add account"})]})})]})]})]})},N=()=>{let[e,n]=(0,s.useState)(!1),[t,a]=(0,s.useState)("paper"),i=(0,s.useRef)(null),l=e=>()=>{n(!0),a(e)},m=()=>n(!1);return(0,s.useEffect)(()=>{if(e){let{current:e}=i;null!==e&&e.focus()}},[e]),(0,o.jsxs)("div",{className:"demo-space-x",children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:l("paper"),children:"scroll=paper"}),(0,o.jsx)(r.Z,{variant:"outlined",onClick:l("body"),children:"scroll=body"}),(0,o.jsxs)(c.Z,{open:e,scroll:t,onClose:m,"aria-labelledby":"scroll-dialog-title","aria-describedby":"scroll-dialog-description",children:[(0,o.jsx)(d.Z,{id:"scroll-dialog-title",children:"Subscribe"}),(0,o.jsx)(u.Z,{dividers:"paper"===t,children:(0,o.jsx)(g.Z,{id:"scroll-dialog-description",ref:i,tabIndex:-1,children:[...Array(50)].map(()=>"Cotton candy sesame snaps toffee chupa chups caramels. Candy icing gummi bears pastry cake icing brownie\n                oat cake. Tootsie roll biscuit chupa chups apple pie muffin jelly-o caramels. Muffin chocolate bar sweet\n                cookie chupa chups.")})}),(0,o.jsxs)(p.Z,{sx:{p:e=>"".concat(e.spacing(2.5)," !important")},children:[(0,o.jsx)(r.Z,{onClick:m,children:"Cancel"}),(0,o.jsx)(r.Z,{onClick:m,children:"Subscribe"})]})]})]})};var W=t(54776);let R=(0,s.forwardRef)(function(e,n){return(0,o.jsx)(W.Z,{direction:"up",ref:n,...e})}),E=()=>{let[e,n]=(0,s.useState)(!1),t=()=>n(!0),a=()=>n(!1);return(0,o.jsxs)(s.Fragment,{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:t,children:"Slide in alert dialog"}),(0,o.jsxs)(c.Z,{open:e,keepMounted:!0,onClose:a,TransitionComponent:R,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description",children:[(0,o.jsx)(d.Z,{id:"alert-dialog-slide-title",children:"Use Google's location service?"}),(0,o.jsx)(u.Z,{children:(0,o.jsx)(g.Z,{id:"alert-dialog-slide-description",children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(r.Z,{onClick:a,children:"Disagree"}),(0,o.jsx)(r.Z,{onClick:a,children:"Agree"})]})]})]})};var G=t(93946);let z=()=>{let[e,n]=(0,s.useState)(!1),t=()=>n(!0),a=()=>n(!1);return(0,o.jsxs)("div",{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:t,children:"Open dialog"}),(0,o.jsxs)(c.Z,{onClose:a,"aria-labelledby":"customized-dialog-title",open:e,children:[(0,o.jsxs)(d.Z,{id:"customized-dialog-title",sx:{p:4},children:[(0,o.jsx)(i.Z,{variant:"h6",component:"span",children:"Modal title"}),(0,o.jsx)(G.Z,{"aria-label":"close",onClick:a,sx:{top:10,right:10,position:"absolute",color:"grey.500"},children:(0,o.jsx)(A.Z,{icon:"mdi:close"})})]}),(0,o.jsxs)(u.Z,{dividers:!0,sx:{p:4},children:[(0,o.jsx)(i.Z,{sx:{mb:4},children:"Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels pastry."}),(0,o.jsx)(i.Z,{sx:{mb:4},children:"Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish sugar plum. Gingerbread gummies marzipan gingerbread."}),(0,o.jsx)(i.Z,{children:"Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans chocolate bar chocolate marzipan candy fruitcake jujubes."})]}),(0,o.jsx)(p.Z,{sx:{p:e=>"".concat(e.spacing(3)," !important")},children:(0,o.jsx)(r.Z,{onClick:a,children:"Save changes"})})]})]})},U=()=>{let[e,n]=(0,s.useState)(!1),t=()=>n(!0),a=()=>n(!1);return(0,o.jsxs)("div",{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:t,children:"Open dialog"}),(0,o.jsxs)(c.Z,{fullScreen:!0,onClose:a,"aria-labelledby":"full-screen-dialog-title",open:e,children:[(0,o.jsxs)(d.Z,{id:"full-screen-dialog-title",children:[(0,o.jsx)(i.Z,{variant:"h6",component:"span",children:"Modal title"}),(0,o.jsx)(G.Z,{"aria-label":"close",onClick:a,sx:{top:8,right:10,position:"absolute",color:"grey.500"},children:(0,o.jsx)(A.Z,{icon:"mdi:close"})})]}),(0,o.jsxs)(u.Z,{children:[(0,o.jsx)(i.Z,{sx:{mb:4},children:"Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels pastry."}),(0,o.jsx)(i.Z,{sx:{mb:4},children:"Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish sugar plum. Gingerbread gummies marzipan gingerbread."}),(0,o.jsx)(i.Z,{children:"Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans chocolate bar chocolate marzipan candy fruitcake jujubes."})]}),(0,o.jsx)(p.Z,{className:"dialog-actions-dense",children:(0,o.jsx)(r.Z,{onClick:a,children:"Save changes"})})]})]})},P=()=>{let[e,n]=(0,s.useState)(!1),t=()=>n(!0),a=()=>n(!1);return(0,o.jsxs)(s.Fragment,{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:t,children:"Open dialog"}),(0,o.jsxs)(c.Z,{open:e,disableEscapeKeyDown:!0,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description",onClose:(e,n)=>{"backdropClick"!==n&&a()},children:[(0,o.jsx)(d.Z,{id:"alert-dialog-title",children:"Use Google's location service?"}),(0,o.jsx)(u.Z,{children:(0,o.jsx)(g.Z,{id:"alert-dialog-description",children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(r.Z,{onClick:a,children:"Disagree"}),(0,o.jsx)(r.Z,{onClick:a,children:"Agree"})]})]})]})};var J=t(2734),q=t(98396);let _=()=>{let[e,n]=(0,s.useState)(!1),t=(0,J.Z)(),a=(0,q.Z)(t.breakpoints.down("sm")),i=()=>n(!0),l=()=>n(!1);return(0,o.jsxs)(s.Fragment,{children:[(0,o.jsx)(r.Z,{variant:"outlined",onClick:i,children:"Open responsive dialog"}),(0,o.jsxs)(c.Z,{fullScreen:a,open:e,onClose:l,"aria-labelledby":"responsive-dialog-title",children:[(0,o.jsx)(d.Z,{id:"responsive-dialog-title",children:"Use Google's location service?"}),(0,o.jsx)(u.Z,{children:(0,o.jsx)(g.Z,{children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(r.Z,{onClick:l,children:"Disagree"}),(0,o.jsx)(r.Z,{onClick:l,children:"Agree"})]})]})]})},V=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogAlert = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogAlert\n"})}),H=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogConfirmation = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        disableEscapeKeyDown\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n        onClose={(event, reason) => {\n          if (reason !== 'backdropClick') {\n            handleClose()\n          }\n        }}\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogConfirmation\n"})}),Q=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport TextField from '@mui/material/TextField'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogForm = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 3 }}>\n            To subscribe to this website, please enter your email address here. We will send updates occasionally.\n          </DialogContentText>\n          <TextField id='name' autoFocus fullWidth type='email' label='Email Address' />\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogForm\n"})}),Y=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\nconst DialogFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog fullScreen onClose={handleClose} aria-labelledby='full-screen-dialog-title' open={open}>\n        <DialogTitle id='full-screen-dialog-title'>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 8, right: 10, position: 'absolute', color: 'grey.500' }}\n          >\n            <Icon icon='mdi:close' />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Typography sx={{ mb: 4 }}>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography sx={{ mb: 4 }}>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogFullScreen\n"})}),K=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport { useTheme } from '@mui/material/styles'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogRespoFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n\n  // ** Hooks\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby='responsive-dialog-title'>\n        <DialogTitle id='responsive-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogRespoFullScreen\n"})}),X=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport List from '@mui/material/List'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport MuiAvatar from '@mui/material/Avatar'\nimport ListItem from '@mui/material/ListItem'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport ListItemText from '@mui/material/ListItemText'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\n// ** Custom Components Imports\nimport CustomAvatar from 'src/@core/components/mui/avatar'\n\nconst emails = ['username@gmail.com', 'user02@gmail.com']\n\nconst DialogSimple = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [selectedValue, setSelectedValue] = useState(emails[1])\n  const handleClickOpen = () => setOpen(true)\n  const handleDialogClose = () => setOpen(false)\n\n  const handleClose = value => {\n    setOpen(false)\n    setSelectedValue(value)\n  }\n\n  return (\n    <div>\n      <Typography variant='subtitle1' sx={{ mb: 2 }}>\n        Selected: {selectedValue}\n      </Typography>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog onClose={handleDialogClose} aria-labelledby='simple-dialog-title' open={open}>\n        <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\n        <List sx={{ pt: 0, px: '0 !important' }}>\n          {emails.map(email => (\n            <ListItem key={email} disablePadding onClick={() => handleClose(email)}>\n              <ListItemButton>\n                <ListItemAvatar>\n                  <CustomAvatar skin='light'>\n                    <Icon icon='mdi:account-outline' />\n                  </CustomAvatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n          <ListItem disablePadding onClick={() => handleClose('addAccount')}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <MuiAvatar>\n                  <Icon icon='mdi:plus' />\n                </MuiAvatar>\n              </ListItemAvatar>\n              <ListItemText primary='Add account' />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogSimple\n"})}),$=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Switch from '@mui/material/Switch'\nimport Dialog from '@mui/material/Dialog'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport FormControl from '@mui/material/FormControl'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport { styled } from '@mui/material/styles'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport Select from '@mui/material/Select'\n\n// Styled component for the form\nconst Form = styled('form')({\n  margin: 'auto',\n  display: 'flex',\n  width: 'fit-content',\n  flexDirection: 'column'\n})\n\nconst DialogSizes = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [fullWidth, setFullWidth] = useState(true)\n  const [maxWidth, setMaxWidth] = useState('sm')\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  const handleMaxWidthChange = event => {\n    setMaxWidth(event.target.value)\n  }\n\n  const handleFullWidthChange = event => {\n    setFullWidth(event.target.checked)\n  }\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        maxWidth={maxWidth}\n        fullWidth={fullWidth}\n        onClose={handleClose}\n        aria-labelledby='max-width-dialog-title'\n      >\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 4 }}>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <Form noValidate>\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\n              <Select\n                label='maxWidth'\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width'\n                }}\n              >\n                <MenuItem value={false}>false</MenuItem>\n                <MenuItem value='xs'>xs</MenuItem>\n                <MenuItem value='sm'>sm</MenuItem>\n                <MenuItem value='md'>md</MenuItem>\n                <MenuItem value='lg'>lg</MenuItem>\n                <MenuItem value='xl'>xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              label='Full width'\n              sx={{ mt: 2 }}\n              control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />}\n            />\n          </Form>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogSizes\n"})}),ee=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { forwardRef, Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Slide from '@mui/material/Slide'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />\n})\n\nconst DialogTransition = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        keepMounted\n        onClose={handleClose}\n        TransitionComponent={Transition}\n        aria-labelledby='alert-dialog-slide-title'\n        aria-describedby='alert-dialog-slide-description'\n      >\n        <DialogTitle id='alert-dialog-slide-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-slide-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogTransition\n"})}),en=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\nconst DialogCustomized = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog onClose={handleClose} aria-labelledby='customized-dialog-title' open={open}>\n        <DialogTitle id='customized-dialog-title' sx={{ p: 4 }}>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 10, right: 10, position: 'absolute', color: 'grey.500' }}\n          >\n            <Icon icon='mdi:close' />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers sx={{ p: 4 }}>\n          <Typography sx={{ mb: 4 }}>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography sx={{ mb: 4 }}>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(3)} !important }}>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogCustomized\n"})}),et=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useEffect, useRef, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Dialog from '@mui/material/Dialog'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogsScroll = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [scroll, setScroll] = useState('paper')\n\n  // ** Ref\n  const descriptionElementRef = useRef(null)\n\n  const handleClickOpen = scrollType => () => {\n    setOpen(true)\n    setScroll(scrollType)\n  }\n  const handleClose = () => setOpen(false)\n  useEffect(() => {\n    if (open) {\n      const { current: descriptionElement } = descriptionElementRef\n      if (descriptionElement !== null) {\n        descriptionElement.focus()\n      }\n    }\n  }, [open])\n\n  return (\n    <div className='demo-space-x'>\n      <Button variant='outlined' onClick={handleClickOpen('paper')}>\n        scroll=paper\n      </Button>\n      <Button variant='outlined' onClick={handleClickOpen('body')}>\n        scroll=body\n      </Button>\n      <Dialog\n        open={open}\n        scroll={scroll}\n        onClose={handleClose}\n        aria-labelledby='scroll-dialog-title'\n        aria-describedby='scroll-dialog-description'\n      >\n        <DialogTitle id='scroll-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText id='scroll-dialog-description' ref={descriptionElementRef} tabIndex={-1}>\n            {[...new Array(50)].map(\n              () => Cotton candy sesame snaps toffee chupa chups caramels. Candy icing gummi bears pastry cake icing brownie\n                oat cake. Tootsie roll biscuit chupa chups apple pie muffin jelly-o caramels. Muffin chocolate bar sweet\n                cookie chupa chups.\n            )}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(2.5)} !important }}>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogsScroll\n"})}),eo=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogAlert = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogAlert\n"})}),ea=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogConfirmation = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        disableEscapeKeyDown\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n        onClose={(event, reason) => {\n          if (reason !== 'backdropClick') {\n            handleClose()\n          }\n        }}\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogConfirmation\n"})}),ei=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport TextField from '@mui/material/TextField'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogForm = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 3 }}>\n            To subscribe to this website, please enter your email address here. We will send updates occasionally.\n          </DialogContentText>\n          <TextField id='name' autoFocus fullWidth type='email' label='Email Address' />\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogForm\n"})}),el=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport List from '@mui/material/List'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport MuiAvatar from '@mui/material/Avatar'\nimport ListItem from '@mui/material/ListItem'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport ListItemText from '@mui/material/ListItemText'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\n// ** Custom Components Imports\nimport CustomAvatar from 'src/@core/components/mui/avatar'\n\nconst emails = ['username@gmail.com', 'user02@gmail.com']\n\nconst DialogSimple = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [selectedValue, setSelectedValue] = useState<string>(emails[1])\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleDialogClose = () => setOpen(false)\n\n  const handleClose = (value: string) => {\n    setOpen(false)\n    setSelectedValue(value)\n  }\n\n  return (\n    <div>\n      <Typography variant='subtitle1' sx={{ mb: 2 }}>\n        Selected: {selectedValue}\n      </Typography>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog onClose={handleDialogClose} aria-labelledby='simple-dialog-title' open={open}>\n        <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\n        <List sx={{ pt: 0, px: '0 !important' }}>\n          {emails.map(email => (\n            <ListItem key={email} disablePadding onClick={() => handleClose(email)}>\n              <ListItemButton>\n                <ListItemAvatar>\n                  <CustomAvatar skin='light'>\n                    <Icon icon='mdi:account-outline' />\n                  </CustomAvatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n          <ListItem disablePadding onClick={() => handleClose('addAccount')}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <MuiAvatar>\n                  <Icon icon='mdi:plus' />\n                </MuiAvatar>\n              </ListItemAvatar>\n              <ListItemText primary='Add account' />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogSimple\n"})}),es=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport { useTheme } from '@mui/material/styles'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogRespoFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  // ** Hooks\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby='responsive-dialog-title'>\n        <DialogTitle id='responsive-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogRespoFullScreen\n"})}),er=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState, ChangeEvent } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Switch from '@mui/material/Switch'\nimport Dialog from '@mui/material/Dialog'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport FormControl from '@mui/material/FormControl'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport { styled, Breakpoint } from '@mui/material/styles'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\n\n// Styled component for the form\nconst Form = styled('form')({\n  margin: 'auto',\n  display: 'flex',\n  width: 'fit-content',\n  flexDirection: 'column'\n})\n\nconst DialogSizes = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [fullWidth, setFullWidth] = useState<boolean>(true)\n  const [maxWidth, setMaxWidth] = useState<Breakpoint>('sm')\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  const handleMaxWidthChange = (event: SelectChangeEvent) => {\n    setMaxWidth(event.target.value as Breakpoint)\n  }\n\n  const handleFullWidthChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFullWidth(event.target.checked)\n  }\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        maxWidth={maxWidth}\n        fullWidth={fullWidth}\n        onClose={handleClose}\n        aria-labelledby='max-width-dialog-title'\n      >\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 4 }}>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <Form noValidate>\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\n              <Select\n                label='maxWidth'\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width'\n                }}\n              >\n                <MenuItem value={false as any}>false</MenuItem>\n                <MenuItem value='xs'>xs</MenuItem>\n                <MenuItem value='sm'>sm</MenuItem>\n                <MenuItem value='md'>md</MenuItem>\n                <MenuItem value='lg'>lg</MenuItem>\n                <MenuItem value='xl'>xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              label='Full width'\n              sx={{ mt: 2 }}\n              control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />}\n            />\n          </Form>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogSizes\n"})}),ec=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { forwardRef, Fragment, ReactElement, Ref, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Slide, { SlideProps } from '@mui/material/Slide'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst Transition = forwardRef(function Transition(\n  props: SlideProps & { children?: ReactElement<any, any> },\n  ref: Ref<unknown>\n) {\n  return <Slide direction='up' ref={ref} {...props} />\n})\n\nconst DialogTransition = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        keepMounted\n        onClose={handleClose}\n        TransitionComponent={Transition}\n        aria-labelledby='alert-dialog-slide-title'\n        aria-describedby='alert-dialog-slide-description'\n      >\n        <DialogTitle id='alert-dialog-slide-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-slide-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogTransition\n"})}),em=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\nconst DialogFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog fullScreen onClose={handleClose} aria-labelledby='full-screen-dialog-title' open={open}>\n        <DialogTitle id='full-screen-dialog-title'>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 8, right: 10, position: 'absolute', color: 'grey.500' }}\n          >\n            <Icon icon='mdi:close' />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Typography sx={{ mb: 4 }}>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography sx={{ mb: 4 }}>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogFullScreen\n"})}),ed=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\nconst DialogCustomized = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog onClose={handleClose} aria-labelledby='customized-dialog-title' open={open}>\n        <DialogTitle id='customized-dialog-title' sx={{ p: 4 }}>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 10, right: 10, position: 'absolute', color: 'grey.500' }}\n          >\n            <Icon icon='mdi:close' />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers sx={{ p: 4 }}>\n          <Typography sx={{ mb: 4 }}>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography sx={{ mb: 4 }}>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(3)} !important }}>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogCustomized\n"})}),eu=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useEffect, useRef, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Dialog, { DialogProps } from '@mui/material/Dialog'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogsScroll = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [scroll, setScroll] = useState<DialogProps['scroll']>('paper')\n\n  // ** Ref\n  const descriptionElementRef = useRef<HTMLElement>(null)\n\n  const handleClickOpen = (scrollType: DialogProps['scroll']) => () => {\n    setOpen(true)\n    setScroll(scrollType)\n  }\n\n  const handleClose = () => setOpen(false)\n\n  useEffect(() => {\n    if (open) {\n      const { current: descriptionElement } = descriptionElementRef\n      if (descriptionElement !== null) {\n        descriptionElement.focus()\n      }\n    }\n  }, [open])\n\n  return (\n    <div className='demo-space-x'>\n      <Button variant='outlined' onClick={handleClickOpen('paper')}>\n        scroll=paper\n      </Button>\n      <Button variant='outlined' onClick={handleClickOpen('body')}>\n        scroll=body\n      </Button>\n      <Dialog\n        open={open}\n        scroll={scroll}\n        onClose={handleClose}\n        aria-labelledby='scroll-dialog-title'\n        aria-describedby='scroll-dialog-description'\n      >\n        <DialogTitle id='scroll-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText id='scroll-dialog-description' ref={descriptionElementRef} tabIndex={-1}>\n            {[...new Array(50)].map(\n              () =>\n                Cotton candy sesame snaps toffee chupa chups caramels. Candy icing gummi bears pastry cake icing brownie\n                oat cake. Tootsie roll biscuit chupa chups apple pie muffin jelly-o caramels. Muffin chocolate bar sweet\n                cookie chupa chups.\n            )}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(2.5)} !important }}>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogsScroll\n"})}),ep=()=>(0,o.jsxs)(a.ZP,{container:!0,spacing:6,className:"match-height",children:[(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Simple Dialog",code:{tsx:el,jsx:X},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["Manage ",(0,o.jsx)("code",{children:"open"})," prop with the help of a state."]}),(0,o.jsx)(L,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Alerts",code:{tsx:eo,jsx:V},children:[(0,o.jsx)(i.Z,{sx:{mb:4},children:"Show an alert to the user to convey something or make the user choose from the given options."}),(0,o.jsx)(x,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Transitions",code:{tsx:ec,jsx:ee},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["You can also use any of the transitions that you like. Use ",(0,o.jsx)("code",{children:"TransitionComponent"})," prop for the transition."]}),(0,o.jsx)(E,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Form Dialog",code:{tsx:ei,jsx:Q},children:[(0,o.jsx)(i.Z,{sx:{mb:4},children:"Form dialogs allow users to fill out form fields within a dialog."}),(0,o.jsx)(h,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Customized Dialog",code:{tsx:ed,jsx:en},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["You can customize the component the way you want using ",(0,o.jsx)("code",{children:"styled"})," hook."]}),(0,o.jsx)(z,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Full Screen Dialog",code:{tsx:em,jsx:Y},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["Add ",(0,o.jsx)("code",{children:"fullScreen"})," prop with ",(0,o.jsx)("code",{children:"Dialog"})," component for a full screen dialog."]}),(0,o.jsx)(U,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Optional Sizes",code:{tsx:er,jsx:$},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["You can set a dialog maximum width by using the ",(0,o.jsx)("code",{children:"maxWidth"})," enumerable in combination with the"," ",(0,o.jsx)("code",{children:"fullWidth"})," boolean. When the ",(0,o.jsx)("code",{children:"fullWidth"})," property is true, the dialog will adapt based on the ",(0,o.jsx)("code",{children:"maxWidth"})," value."]}),(0,o.jsx)(v,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Responsive full-screen",code:{tsx:es,jsx:K},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["Make a full screen dialog at particular screen sizes only by using ",(0,o.jsx)("code",{children:"useMediaQuery"})," hook."]}),(0,o.jsx)(_,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Confirmation Dialog",code:{tsx:ea,jsx:H},children:[(0,o.jsxs)(i.Z,{sx:{mb:4},children:["Use ",(0,o.jsx)("code",{children:"disableEscapeKeyDown"})," prop to disable 'Escape' key and use ",(0,o.jsx)("code",{children:"onClose"})," prop to disable the backdrop."]}),(0,o.jsx)(P,{})]})}),(0,o.jsx)(a.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Scrolling Long Content",code:{tsx:eu,jsx:et},children:[(0,o.jsxs)(i.Z,{children:[(0,o.jsx)("code",{children:"scroll=paper"})," scrolls within the paper element and ",(0,o.jsx)("code",{children:"scroll=body"})," scrolls within the body element."]}),(0,o.jsx)(N,{})]})})]});var eg=ep}},function(e){e.O(0,[4386,5511,7481,9774,2888,179],function(){return e(e.s=91103)}),_N_E=e.O()}]);