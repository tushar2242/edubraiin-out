(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4373],{66485:function(e){function n(){return new DOMException("The request is not allowed","NotAllowedError")}async function t(e){if(!navigator.clipboard)throw n();return navigator.clipboard.writeText(e)}async function r(e){let t=document.createElement("span");t.textContent=e,t.style.whiteSpace="pre",t.style.webkitUserSelect="auto",t.style.userSelect="all",document.body.appendChild(t);let r=window.getSelection(),i=window.document.createRange();r.removeAllRanges(),i.selectNode(t),r.addRange(i);let l=!1;try{l=window.document.execCommand("copy")}finally{r.removeAllRanges(),window.document.body.removeChild(t)}if(!l)throw n()}async function i(e){try{await t(e)}catch(t){try{await r(e)}catch(e){throw e||t||n()}}}/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */e.exports=i},52149:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/forms/form-elements/input-mask",function(){return t(95035)}])},92223:function(e,n,t){"use strict";t.d(n,{Z:function(){return G}});var r=t(85893),i=t(67294),l=t(87357),o=t(66242),s=t(34386),a=t(67720),m=t(57922),d=t(93946),c=t(78445),p=t(44267),x=t(96420),u=t(98396),h=t(33454),b=t(63730),f=t(15660),j=t.n(f),g=t(86501),C=t(66485),v=t.n(C);let I=e=>e&&("TEXTAREA"===e.nodeName||"INPUT"===e.nodeName);var Z=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=(0,i.useRef)(null),t=()=>{e.onSuccess&&e.onSuccess(),e.selectOnCopy&&I(n.current)&&n.current.select()},r=()=>{e.onError&&e.onError();let t=!1!==e.selectOnError;t&&I(n.current)&&n.current.select()},l=e=>{v()(e).then(t).catch(r)},o=(0,i.useCallback)(e=>{"string"==typeof e?l(e):n.current&&l(n.current.value)},[]);return{copy:o,target:n}};let S=e=>{let{id:n,sx:t,code:f,title:C,children:v,className:I}=e,[S,G]=(0,i.useState)(!1),[k,y]=(0,i.useState)(null!==f.tsx?"tsx":"jsx"),L=Z(),z=(0,u.Z)(e=>e.breakpoints.down("md"));(0,i.useEffect)(()=>{j().highlightAll()},[S,k]);let w=()=>null!==f.tsx&&"tsx"===k?f.tsx.props.children.props.children:null!==f.jsx&&"jsx"===k?f.jsx.props.children.props.children:"",P=()=>{L.copy(w()),g.ZP.success("The source code has been copied to your clipboard.",{duration:2e3})};return(0,r.jsxs)(o.Z,{className:I,sx:{"& .MuiCardHeader-action":{lineHeight:.8},...t},id:n||"card-snippet--".concat(C.toLowerCase().replace(/ /g,"-")),children:[(0,r.jsx)(c.Z,{title:C,...z?{}:{action:(0,r.jsx)(d.Z,{onClick:()=>G(!S),children:(0,r.jsx)(b.Z,{icon:"mdi:code-tags",fontSize:20})})}}),(0,r.jsx)(p.Z,{children:v}),z?null:(0,r.jsxs)(m.Z,{in:S,children:[(0,r.jsx)(a.Z,{sx:{my:"0 !important"}}),(0,r.jsxs)(p.Z,{sx:{position:"relative","& pre":{m:"0 !important",maxHeight:500}},children:[(0,r.jsx)(l.Z,{sx:{mb:4,display:"flex",alignItems:"center",justifyContent:"flex-end"},children:(0,r.jsxs)(h.Z,{exclusive:!0,size:"small",color:"primary",value:k,onChange:(e,n)=>null!==n?y(n):null,children:[null!==f.tsx?(0,r.jsx)(x.Z,{value:"tsx",children:(0,r.jsx)(b.Z,{icon:"mdi:language-typescript",fontSize:20})}):null,null!==f.jsx?(0,r.jsx)(x.Z,{value:"jsx",children:(0,r.jsx)(b.Z,{icon:"mdi:language-javascript",fontSize:20})}):null]})}),(0,r.jsx)(s.Z,{title:"Copy the source",placement:"top",children:(0,r.jsx)(d.Z,{onClick:P,sx:{top:"5rem",color:"grey.100",right:"2.5625rem",position:"absolute"},children:(0,r.jsx)(b.Z,{icon:"mdi:content-copy",fontSize:20})})}),(0,r.jsx)("div",{children:null!==f[k]?f[k]:null})]})]})]})};var G=S},25358:function(e,n,t){"use strict";var r=t(85893),i=t(86886);let l=e=>{let{title:n,subtitle:t}=e;return(0,r.jsxs)(i.ZP,{item:!0,xs:12,children:[n,t||null]})};n.Z=l},12860:function(e,n,t){"use strict";var r=t(90948),i=t(87357);let l=(0,r.ZP)(i.Z)(e=>{let{theme:n}=e;return{"& input":{height:56,fontSize:16,width:"100%",borderWidth:1,background:"none",borderStyle:"solid",padding:"16.5px 14px",color:n.palette.text.primary,borderRadius:n.shape.borderRadius,fontFamily:n.typography.body1.fontFamily,borderColor:"rgba(".concat(n.palette.customColors.main,", 0.22)"),transition:n.transitions.create(["border-color","box-shadow"]),"&:focus, &:focus-visible":{outline:0,borderWidth:2,padding:"15.5px 13px",borderColor:"".concat(n.palette.primary.main," !important")},"&::-webkit-input-placeholder":{color:n.palette.text.secondary}}}});n.Z=l},95035:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return C}});var r=t(85893),i=t(41664),l=t.n(i),o=t(86886),s=t(90948),a=t(15861),m=t(25358),d=t(92223),c=t(12860),p=t(47312),x=t(52034),u=t.n(x);t(49634);let h=()=>(0,r.jsxs)(o.ZP,{container:!0,spacing:6,children:[(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"credit-card",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Credit Card"}),(0,r.jsx)(u(),{id:"credit-card",options:{creditCard:!0},placeholder:"0000 0000 0000 0000"})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"phone-number",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Phone Number"}),(0,r.jsx)(u(),{id:"phone-number",placeholder:"1 234 567 8900",options:{phone:!0,phoneRegionCode:"US"}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"date",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Date"}),(0,r.jsx)(u(),{id:"date",placeholder:"2001-01-01",options:{date:!0,delimiter:"-",datePattern:["Y","m","d"]}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"time",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Time"}),(0,r.jsx)(u(),{id:"time",placeholder:"12:00:00",options:{time:!0,timePattern:["h","m","s"]}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"numeral",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Numeral"}),(0,r.jsx)(u(),{id:"numeral",placeholder:"10,000",options:{numeral:!0,numeralThousandsGroupStyle:"thousand"}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"blocks",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Blocks"}),(0,r.jsx)(u(),{id:"blocks",placeholder:"Blocks [4, 3, 3]",options:{blocks:[4,3,3],uppercase:!0}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"delimiter",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Delimiter"}),(0,r.jsx)(u(),{id:"delimiter",placeholder:"Delimiter: '.'",options:{delimiter:"\xb7",blocks:[3,3,3],uppercase:!0}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"custom-delimiter",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Custom Delimiters"}),(0,r.jsx)(u(),{id:"custom-delimiter",placeholder:"Delimiter: ['.', '.', '-']",options:{delimiters:[".",".","-"],blocks:[3,3,3,2],uppercase:!0}})]}),(0,r.jsxs)(o.ZP,{item:!0,xs:12,sm:6,lg:4,children:[(0,r.jsx)(p.Z,{htmlFor:"prefix",sx:{mb:2,fontSize:".75rem",maxWidth:"max-content"},children:"Prefix"}),(0,r.jsx)(u(),{id:"prefix",options:{prefix:"+63",blocks:[3,3,3,4],uppercase:!0}})]})]}),b=(0,r.jsx)("pre",{className:"language-jsx",children:(0,r.jsx)("code",{className:"language-jsx",children:"// ** MUI Imports\nimport Grid from '@mui/material/Grid'\nimport InputLabel from '@mui/material/InputLabel'\n\n// ** CleaveJS Imports\nimport Cleave from 'cleave.js/react'\nimport 'cleave.js/dist/addons/cleave-phone.us'\n\nconst InputMaskExamples = () => {\n  return (\n    <Grid container spacing={6}>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='credit-card' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Credit Card\n        </InputLabel>\n        <Cleave id='credit-card' options={{ creditCard: true }} placeholder='0000 0000 0000 0000' />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='phone-number' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Phone Number\n        </InputLabel>\n        <Cleave id='phone-number' placeholder='1 234 567 8900' options={{ phone: true, phoneRegionCode: 'US' }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='date' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Date\n        </InputLabel>\n        <Cleave\n          id='date'\n          placeholder='2001-01-01'\n          options={{ date: true, delimiter: '-', datePattern: ['Y', 'm', 'd'] }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='time' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Time\n        </InputLabel>\n        <Cleave id='time' placeholder='12:00:00' options={{ time: true, timePattern: ['h', 'm', 's'] }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='numeral' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Numeral\n        </InputLabel>\n        <Cleave id='numeral' placeholder='10,000' options={{ numeral: true, numeralThousandsGroupStyle: 'thousand' }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='blocks' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Blocks\n        </InputLabel>\n        <Cleave id='blocks' placeholder='Blocks [4, 3, 3]' options={{ blocks: [4, 3, 3], uppercase: true }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='delimiter' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Delimiter\n        </InputLabel>\n        <Cleave\n          id='delimiter'\n          placeholder=\"Delimiter: '.'\"\n          options={{ delimiter: '\xb7', blocks: [3, 3, 3], uppercase: true }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='custom-delimiter' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Custom Delimiters\n        </InputLabel>\n        <Cleave\n          id='custom-delimiter'\n          placeholder=\"Delimiter: ['.', '.', '-']\"\n          options={{ delimiters: ['.', '.', '-'], blocks: [3, 3, 3, 2], uppercase: true }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='prefix' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Prefix\n        </InputLabel>\n        <Cleave id='prefix' options={{ prefix: '+63', blocks: [3, 3, 3, 4], uppercase: true }} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default InputMaskExamples\n"})}),f=(0,r.jsx)("pre",{className:"language-jsx",children:(0,r.jsx)("code",{className:"language-jsx",children:"// ** MUI Imports\nimport Grid from '@mui/material/Grid'\nimport InputLabel from '@mui/material/InputLabel'\n\n// ** CleaveJS Imports\nimport Cleave from 'cleave.js/react'\nimport 'cleave.js/dist/addons/cleave-phone.us'\n\nconst InputMaskExamples = () => {\n  return (\n    <Grid container spacing={6}>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='credit-card' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Credit Card\n        </InputLabel>\n        <Cleave id='credit-card' options={{ creditCard: true }} placeholder='0000 0000 0000 0000' />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='phone-number' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Phone Number\n        </InputLabel>\n        <Cleave id='phone-number' placeholder='1 234 567 8900' options={{ phone: true, phoneRegionCode: 'US' }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='date' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Date\n        </InputLabel>\n        <Cleave\n          id='date'\n          placeholder='2001-01-01'\n          options={{ date: true, delimiter: '-', datePattern: ['Y', 'm', 'd'] }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='time' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Time\n        </InputLabel>\n        <Cleave id='time' placeholder='12:00:00' options={{ time: true, timePattern: ['h', 'm', 's'] }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='numeral' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Numeral\n        </InputLabel>\n        <Cleave id='numeral' placeholder='10,000' options={{ numeral: true, numeralThousandsGroupStyle: 'thousand' }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='blocks' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Blocks\n        </InputLabel>\n        <Cleave id='blocks' placeholder='Blocks [4, 3, 3]' options={{ blocks: [4, 3, 3], uppercase: true }} />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='delimiter' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Delimiter\n        </InputLabel>\n        <Cleave\n          id='delimiter'\n          placeholder=\"Delimiter: '.'\"\n          options={{ delimiter: '\xb7', blocks: [3, 3, 3], uppercase: true }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='custom-delimiter' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Custom Delimiters\n        </InputLabel>\n        <Cleave\n          id='custom-delimiter'\n          placeholder=\"Delimiter: ['.', '.', '-']\"\n          options={{ delimiters: ['.', '.', '-'], blocks: [3, 3, 3, 2], uppercase: true }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <InputLabel htmlFor='prefix' sx={{ mb: 2, fontSize: '.75rem', maxWidth: 'max-content' }}>\n          Prefix\n        </InputLabel>\n        <Cleave id='prefix' options={{ prefix: '+63', blocks: [3, 3, 3, 4], uppercase: true }} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default InputMaskExamples\n"})}),j=(0,s.ZP)(l())(e=>{let{theme:n}=e;return{textDecoration:"none",color:n.palette.primary.main}}),g=()=>(0,r.jsx)(c.Z,{children:(0,r.jsxs)(o.ZP,{container:!0,spacing:6,children:[(0,r.jsx)(m.Z,{title:(0,r.jsx)(a.Z,{variant:"h5",children:(0,r.jsx)(j,{href:"https://github.com/nosir/cleave.js",target:"_blank",children:"Cleave.js"})}),subtitle:(0,r.jsx)(a.Z,{variant:"body2",children:"Format input text content when you are typing"})}),(0,r.jsx)(o.ZP,{item:!0,xs:12,children:(0,r.jsx)(d.Z,{title:"Input Masks",code:{tsx:f,jsx:b},children:(0,r.jsx)(h,{})})})]})});var C=g}},function(e){e.O(0,[4386,5511,6565,9774,2888,179],function(){return e(e.s=52149)}),_N_E=e.O()}]);